-- This file is used to generate build.ninja to out directory.
-------------------------------------------------------------------------------

function string.endswith(s, sub_str)
    local s = string.sub(s, -#sub_str)
    return s == sub_str
end

-------------------------------------------------------------------------------
-- class 

local _class = {}

local function class(name)
    local clazz = {__cname = name}
    _class[name] = clazz
    clazz.new = function(...)
        local instance = {}
        setmetatable(instance, {__index = clazz})
        if clazz.ctor then
            clazz.ctor(instance, ...)
        end
        return instance
    end
    return clazz
end

-------------------------------------------------------------------------------
-- lgn

-- utils
local function choose_target_rule(type)
    local m = {
        exe = "link",
        static = "alink"
    }
    return m[type]
end


-- ninja syntax writer

local writer = class("writer")

function writer:ctor(output)
    self.output = output
end

function writer:comment(c)
    self.output:write("#  " .. c .. "\n")
end

function writer:newline() 
    self.output:write("\n")
end

function writer:variable(key, value, indent)
    self:_line(string.format("%s = %s", key, value), indent)
end

function writer:rule(name, command, description)
    self:_line("rule " .. name)
    self:variable("command", command, 1)
    if description ~= nil then
        self:variable("description", description, 1)
    end
end

function writer:build(output, rule, input)
    self:_line(string.format("build %s: %s %s", output, rule, input))
end

function writer:default(...)
    self:_line(string.format('default %s', table.concat({...}, " ")))
end

function writer:_line(text, indent)
    if indent == nil then
        indent = 0
    end
    local leading_space = string.rep("  ", indent)
    self.output:write(leading_space .. text .. '\n')
end

function writer:close()
    self.output:close()
end


-- target declaration

local lgn = {}
lgn.toolchain = nil
lgn.targets = {}
lgn.defaults = {}
lgn.variables = {}

function lgn:target(tn, name)
    local t = {
        type = tn,
        name = name
    }
    self.targets[name] = t
    return t
end

function lgn:set_default_targets(...)
    self.defaults = {...}
end

function lgn:declare_variable(key, value)
    self.variables[key] = value
end

-- generation
local function gen_target(target, writer)
    local w = writer

    local inputs = {}

    for _, source in ipairs(target.sources) do
        local outname = ""
        if string.endswith(source, '.c') then
            outname = string.sub(source, 1, -3) .. ".o"
            table.insert(inputs, outname)
            w:build(outname, "cc", "../" .. source)
        elseif string.endswith(source, '.rc') then
            outname = source .. ".o"
            table.insert(inputs, outname)
            w:build(outname, "rc", "../" .. source)
        end
    end
    w:newline()

    local tn = target.name .. target.output_extension
    w:build(tn, choose_target_rule(target.type), table.concat(inputs, " "))
    w:newline()
end

function lgn:gen(out_root)
    local tools = self.toolchain.tools

    local f = io.open(out_root .. "/build.ninja", "w")
    local w = writer.new(f)
    -- head
    w:comment("This file is used to build llab.")
    w:comment("It is generated by configure.lua.")
    w:newline()

    for key, value in pairs(lgn.variables) do
        w:variable(key, value)
    end
    w:newline()

    -- rules
    for _, rule in ipairs(tools) do
        w:rule(rule.name, rule.command, rule.description)
    end
    w:newline()

    -- targets
    for _, target in pairs(lgn.targets) do
        gen_target(target, w)
    end
    -- default
    local tt = {}
    for _, dn in ipairs(lgn.defaults) do
        local target = lgn.targets[dn]
        table.insert(tt, target.name .. target.output_extension)
    end

    w:default(table.concat(tt, " "))

    w:close()
end

-------------------------------------------------------------------------------
-- declare

local function declare()
    lgn.toolchain = {
        tools = {}
    }

    local tools = lgn.toolchain.tools

    table.insert(tools, {
        name = "cc",
        command = "gcc ${defines} ${include_dirs} ${cflags} -c ${in} -o ${out}",
        description = "CC ${out}"
    })
    table.insert(tools, {
        name = "link",
        command = "gcc ${libs_dirs} ${libs} -o ${out} ${in}",
        description = "LINK ${out}"
    })
    table.insert(tools, {
        name = "alink",
        command = "gcc ",
        description = "ALINK ${out}"
    })
    table.insert(tools, {
        name = "rc",
        command = "windres -i ${in} -o ${out}",
        description = "RC ${out}"
    })

    -- attributes
    lgn:declare_variable("ninja_required_version", "1.10")
    lgn:declare_variable("cflags", "-g -O2 -Wall")
    lgn:declare_variable('defines', "-DUNICODE")

    local llab = lgn:target("exe", "llab")
    llab.output_extension = ".exe"
    llab.deps = {"lua"}

    llab.sources = {
        "src/llab.rc",
        "src/llab.c",
        "src/ll_driver.c",
        "src/ll_engine.c",
        "src/ll_client.c"
    }

    local lua = lgn:target("static", "lua")
    lua.output_extension = ".lib"
    lua.sources = {
        "3rd/lua/lapi.c"
    }

    lgn:set_default_targets("llab")

end

-------------------------------------------------------------------------------
-- main

local function main()
    declare()
    lgn:gen("./out")
end

main()